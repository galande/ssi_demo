import type { SdJwtVcSignOptions, SdJwtVcPresentOptions, SdJwtVcVerifyOptions, SdJwtVcPayload, SdJwtVcHeader } from './SdJwtVcOptions';
import type { AgentContext } from '../../agent';
import type { JwkJson } from '../../crypto';
import type { Query } from '../../storage/StorageService';
import { SdJwtVcRecord, SdJwtVcRepository } from './repository';
export interface SdJwtVc<Header extends SdJwtVcHeader = SdJwtVcHeader, Payload extends SdJwtVcPayload = SdJwtVcPayload> {
    compact: string;
    header: Header;
    payload: Payload;
    prettyClaims: Payload;
}
export interface CnfPayload {
    jwk?: JwkJson;
    kid?: string;
}
export interface VerificationResult {
    isValid: boolean;
    isSignatureValid: boolean;
    isNotBeforeValid?: boolean;
    isExpiryTimeValid?: boolean;
    areRequiredClaimsIncluded?: boolean;
    isKeyBindingValid?: boolean;
    containsExpectedKeyBinding?: boolean;
    containsRequiredVcProperties?: boolean;
}
/**
 * @internal
 */
export declare class SdJwtVcService {
    private sdJwtVcRepository;
    constructor(sdJwtVcRepository: SdJwtVcRepository);
    sign<Payload extends SdJwtVcPayload>(agentContext: AgentContext, options: SdJwtVcSignOptions<Payload>): Promise<{
        compact: string;
        prettyClaims: Payload;
        header: {
            readonly alg: import("../../crypto").JwaSignatureAlgorithm;
            readonly typ: "vc+sd-jwt";
            readonly kid: string;
        };
        payload: Payload;
    }>;
    fromCompact<Header extends SdJwtVcHeader = SdJwtVcHeader, Payload extends SdJwtVcPayload = SdJwtVcPayload>(compactSdJwtVc: string): SdJwtVc<Header, Payload>;
    present<Payload extends SdJwtVcPayload = SdJwtVcPayload>(agentContext: AgentContext, { compactSdJwtVc, presentationFrame, verifierMetadata }: SdJwtVcPresentOptions<Payload>): Promise<string>;
    verify<Header extends SdJwtVcHeader = SdJwtVcHeader, Payload extends SdJwtVcPayload = SdJwtVcPayload>(agentContext: AgentContext, { compactSdJwtVc, keyBinding, requiredClaimKeys }: SdJwtVcVerifyOptions): Promise<{
        verification: VerificationResult;
        sdJwtVc: {
            payload: Payload;
            header: Header;
            compact: string;
            prettyClaims: Payload;
        };
    }>;
    store(agentContext: AgentContext, compactSdJwtVc: string): Promise<SdJwtVcRecord>;
    getById(agentContext: AgentContext, id: string): Promise<SdJwtVcRecord>;
    getAll(agentContext: AgentContext): Promise<Array<SdJwtVcRecord>>;
    findByQuery(agentContext: AgentContext, query: Query<SdJwtVcRecord>): Promise<Array<SdJwtVcRecord>>;
    deleteById(agentContext: AgentContext, id: string): Promise<void>;
    update(agentContext: AgentContext, sdJwtVcRecord: SdJwtVcRecord): Promise<void>;
    private resolveDidUrl;
    private get hasher();
    /**
     * @todo validate the JWT header (alg)
     */
    private signer;
    /**
     * @todo validate the JWT header (alg)
     */
    private verifier;
    private extractKeyFromIssuer;
    private parseIssuerFromCredential;
    private parseHolderBindingFromCredential;
    private extractKeyFromHolderBinding;
}
