import type { CredentialRevocationConfig } from './CredentialRevocationConfig';
import type { RevocationStatusList } from './RevocationStatusList';
import type { JsonObject } from '../types';
import { AnoncredsObject } from '../AnoncredsObject';
import { Credential } from './Credential';
import { CredentialDefinition } from './CredentialDefinition';
import { CredentialDefinitionPrivate } from './CredentialDefinitionPrivate';
import { CredentialOffer } from './CredentialOffer';
import { CredentialRequest } from './CredentialRequest';
import { CredentialRequestMetadata } from './CredentialRequestMetadata';
import { RevocationRegistryDefinition } from './RevocationRegistryDefinition';
export type CreateW3cCredentialOptions = {
    credentialDefinition: CredentialDefinition | JsonObject;
    credentialDefinitionPrivate: CredentialDefinitionPrivate | JsonObject;
    credentialOffer: CredentialOffer | JsonObject;
    credentialRequest: CredentialRequest | JsonObject;
    attributeRawValues: Record<string, string>;
    revocationRegistryId?: string;
    revocationConfiguration?: CredentialRevocationConfig;
    revocationStatusList?: RevocationStatusList | JsonObject;
    w3cVersion?: string;
};
export type ProcessW3cCredentialOptions = {
    credentialRequestMetadata: CredentialRequestMetadata | JsonObject;
    linkSecret: string;
    credentialDefinition: CredentialDefinition | JsonObject;
    revocationRegistryDefinition?: RevocationRegistryDefinition | JsonObject;
};
export type W3cCredentialFromLegacyOptions = {
    credential: Credential;
    issuerId: string;
    w3cVersion?: string;
};
export declare class W3cCredential extends AnoncredsObject {
    private proofDetails?;
    static create(options: CreateW3cCredentialOptions): W3cCredential;
    static fromJson(json: JsonObject): W3cCredential;
    process(options: ProcessW3cCredentialOptions): this;
    private getProofDetails;
    get schemaId(): string;
    get credentialDefinitionId(): string;
    get revocationRegistryId(): string;
    get revocationRegistryIndex(): number | undefined;
    get timestamp(): number | undefined;
    toLegacy(): Credential;
    static fromLegacy(options: W3cCredentialFromLegacyOptions): W3cCredential;
}
